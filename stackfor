#!/bin/bash
set -e

#       PROJECT: stackfor
#      FILENAME: stackfor
#       VERSION: 00.02.00
#         BUILD: 170907
#   DESCRIPTION: Automatically builds stacks for software development in Debian-based distributions.
#       AUTHORS: Christopher Banwarth (development@aprettycoolprogram.com)
#     COPYRIGHT: 2017 A Pretty Cool Program
#       LICENSE: Apache License, Version 2.0 [http://www.apache.org/licenses/LICENSE-2.0]
#     MORE INFO: http://aprettycoolprogram.com/stackfor

AptGet() {
    if [[ $@ =~ "update" ] || [ $@ =~ "upgrade" ]]; then
        sudo apt-get update
    fi | tee -a $stackforLogs/apt_get_update.log

    if [[ $@ =~ "upgrade" ]]; then
        sudo apt-get upgrade
        sudo apt-get dist-upgrade
    fi | tee -a $stackforLogs/apt_get_upgrade.log

    if [[  $@ =~ "clean" ]]; then
        sudo apt-get autoremove
        sudo apt-get -y autoclean
        sudo apt-get -y clean
    fi | tee -a $stackforLogs/apt_get_clean.log
}

## Verify passed packages are installed, install them if not. Used in stacker scripts.
InstallPackage() {
    AptGet update
    for package in "$@"; do
        packageExists=$(dpkg-query -W --showformat='${Status}\n' $package | grep "install ok installed")
        if [[ "$packageExists" != "install ok installed" ]]; then
            sudo apt-get install $package | tee -a $stackforLogs/$package_install.log
            touch $stackforHistory/$package.install
        else
            echo "Package $package not installed!"
        fi
    done
    AptGet upgrade clean
}

## Verify passed packages are installed, install them if not. Used in stacker scripts.
InstallPackageMinimal() {
    AptGet update
    for package in "$@"; do
        packageExists=$(dpkg-query -W --showformat='${Status}\n' $package | grep "install ok installed")
        if [[ "$packageExists" != "install ok installed" ]]; then
            sudo apt-get install $package --no-install-recommends | tee -a $stackforLogs/$package_install.log
            touch $stackforHistory/$package.install
        else
            echo "Package $package not installed!"
        fi
    done
    AptGet upgrade clean
}

##### MAIN

## Put arguments in a safe space.
stackforArguments="$@"

## Setup placeholder arrays for the stackers and installed packages.
declare -a stackforStackernames
declare -a installedPackages

## Stacker scripts names.
for filename in "$stackforStackers"; do
    stackforStackernames+=$(basename $1)
done

## Important directories.
export stackforHome=$HOME/.stackfor
export stackforBin=$HOME/.stackfor/bin
export stackforStackers=$HOME/.stackfor/bin/stackers
export stackforTemp=$HOME/.stackfor/temp
export stackforLogs=$HOME/.stackfor/logs/$(date "+%Y%m%d")
export stackforHistory=$HOME/.stackfor/history
-d $stackforHome && mkdir -p $stackforHome/{$stackforBin,$stackforStackers,$stackforTemp,$stackforLogs,$stackforHistory}

## Make sure .profile exists, and has the correct $PATH
! -f $HOME/.profile && touch $HOME/.profile
grep '$stackforBin' $HOME/.profile
if [[ $? == 1 ]] && echo "PATH=$PATH:$stackforBin" >> .profile

## Verify all required packages are installed.
InstallPackage localepurge

## Check to see if the first passed argument is in the list of stacker names.
if [[ "stackforStackernames" =~ "$1" ]]; then
    eval $1 ${@:2}
else
    echo "Invalid command!"
fi












# CheckRequirements localepurge \
#                   software-properties-common \
#                   ca-certificates \
#                   gnupg2 \
#                   curl \
#                   apt-transport-https \
#                   build-essential \
#                   linux-headers-$(uname -r)